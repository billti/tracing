/*
 * Generated by dtrace(1M).
 */

#ifndef	_MYTRACE_PROVIDER_H
#define	_MYTRACE_PROVIDER_H

#include <unistd.h>

#ifdef	__cplusplus
extern "C" {
#endif

#define MYTRACE_STABILITY "___dtrace_stability$mytrace$v1$1_1_0_1_1_0_1_1_0_1_1_0_1_1_0"

#define MYTRACE_TYPEDEFS "___dtrace_typedefs$mytrace$v2"

#if !defined(DTRACE_PROBES_DISABLED) || !DTRACE_PROBES_DISABLED

#define	MYTRACE_AFTER_ENTER(arg0) \
do { \
	__asm__ volatile(".reference " MYTRACE_TYPEDEFS); \
	__dtrace_probe$mytrace$after_enter$v1$696e74(arg0); \
	__asm__ volatile(".reference " MYTRACE_STABILITY); \
} while (0)
#define	MYTRACE_AFTER_ENTER_ENABLED() \
	({ int _r = __dtrace_isenabled$mytrace$after_enter$v1(); \
		__asm__ volatile(""); \
		_r; })
#define	MYTRACE_BEFORE_ENTER() \
do { \
	__asm__ volatile(".reference " MYTRACE_TYPEDEFS); \
	__dtrace_probe$mytrace$before_enter$v1(); \
	__asm__ volatile(".reference " MYTRACE_STABILITY); \
} while (0)
#define	MYTRACE_BEFORE_ENTER_ENABLED() \
	({ int _r = __dtrace_isenabled$mytrace$before_enter$v1(); \
		__asm__ volatile(""); \
		_r; })


extern void __dtrace_probe$mytrace$after_enter$v1$696e74(int);
extern int __dtrace_isenabled$mytrace$after_enter$v1(void);
extern void __dtrace_probe$mytrace$before_enter$v1(void);
extern int __dtrace_isenabled$mytrace$before_enter$v1(void);

#else

#define	MYTRACE_AFTER_ENTER(arg0) \
do { \
	} while (0)
#define	MYTRACE_AFTER_ENTER_ENABLED() (0)
#define	MYTRACE_BEFORE_ENTER() \
do { \
	} while (0)
#define	MYTRACE_BEFORE_ENTER_ENABLED() (0)

#endif /* !defined(DTRACE_PROBES_DISABLED) || !DTRACE_PROBES_DISABLED */


#ifdef	__cplusplus
}
#endif

#endif	/* _MYTRACE_PROVIDER_H */
